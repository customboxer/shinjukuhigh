// Version: 1.0.0
type AssocList<K, V> = List<(K, V)>;
type AssocList__1<K, V> = AssocList<K, V>;
type Branch<K, V> = {left : Trie<K, V>; right : Trie<K, V>; size : Nat};
type Hash = Nat32;
type ImageId = Text;
type ImageId__2 = ImageId;
type ImageObject = [Nat8];
type ImageObject__2 = ImageObject;
type Key<K> = {hash : Hash; key : K};
type Leaf<K, V> = {keyvals : AssocList__1<Key<K>, V>; size : Nat};
type List<T> = ?(T, List<T>);
type Trie<K, V> = {#branch : Branch<K, V>; #empty; #leaf : Leaf<K, V>};
actor {
  stable var imageObjectStore :
    {
      #branch : Branch<ImageId__2, ImageObject__2>;
      #empty;
      #leaf : Leaf<ImageId__2, ImageObject__2>
    }
};
